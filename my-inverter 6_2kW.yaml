substitutions:
  name: Inverter
  device_name: "inverter"
  friendly_name: "My Inverter"
  device_description: "Monitor and control an Inverter"
  node_name: "Inverter"
  node_id: inverter
  inverter_tx_pin: GPIO17
  inverter_rx_pin: GPIO18
  inverter_voltage_offset: "0"
  update_interval: 7s # Minimum 10s recommended to avoid duplicate command errors
  select_skip_updates: "6"
  read_skip_updates: "6"

esphome:
  name: "${device_name}"
  friendly_name: "${node_name}"
  comment: "Monitor and control a solar inverter"
  includes:
    - "helpers"
  project:
    name: "esphome.hybrid-inverter"
    version: 1.3.3
  platformio_options:
    board_build.flash_mode: dio
    board_build.flash_size: 16MB
  
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf
    #type: arduino
    # Custom sdkconfig options
    sdkconfig_options:
      # #COMPILER_OPTIMIZATION_SIZE: y
      COMPILER_OPTIMIZATION_PERF: y
    # # Advanced tweaking options
    # #advanced:
      # #ignore_efuse_mac_crc: false
  flash_size: 16MB

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
   ssid: "Inv Fall"
   password: "anernconnect"

captive_portal:

packages:
  # You can replace next 2 lines with your common configs for all devices
 # common_system: !include includes/common_system.yaml
  common_sensors: !include includes/common_sensors.yaml
  
ota:
  platform: esphome

logger:
 # id: uart_logger
  baud_rate: 0
 # level: DEBUG #VERBOSE
  logs:
    component: ERROR # Fix for issue #4717 "Component xxxxxx took a long time for an operation"

time:
  - platform: homeassistant
    id: hass_time

web_server:
 port: 80
 local: true
 version: 3
#  ota: false  

api:
  
uart:
  # - id: uart_pzem
    # baud_rate: 9600
    # tx_pin: ${pzem_tx_pin}
    # rx_pin: ${pzem_rx_pin}
    # debug:
     # direction: BOTH
     # dummy_receiver: false
     # after:
      # delimiter: "\n"
     # sequence:
      # - lambda: UARTDebug::log_string(direction, bytes);

  - id: uart_inverter
    baud_rate: 2400
    tx_pin: ${inverter_tx_pin}
    rx_pin: ${inverter_rx_pin}
   # debug:
   #  direction: BOTH
   #  dummy_receiver: false
   #  after:
   #   delimiter: "\n"
   #  sequence:
   #   - lambda: UARTDebug::log_string(direction, bytes);
 


modbus:
  - id: modbus_inverter
    uart_id: uart_inverter
    send_wait_time: 600ms
  
  # - id: modbus_pzem
    # uart_id: uart_pzem
    # send_wait_time: 250ms


modbus_controller:
  - id: smg_inverter
    address: 0x05
    modbus_id: modbus_inverter
    setup_priority: -10
    offline_skip_updates: 5
    #command_throttle: 1s
    update_interval: ${update_interval}
  
  # - id: pzem
    # # The current device address.
    # address: 0x02
    # # The special address 0xF8 is a broadcast address accepted by any pzem device,
    # # so if you use this address, make sure there is only one pzem device connected
    # # to the uart bus.
    # # address: 0xF8
    # modbus_id: modbus_pzem
    # command_throttle: 0ms
    # setup_priority: -10
    # offline_skip_updates: 100
    # update_interval: ${pzem_update_interval}

sensor:
  # - platform: pzemac
    # modbus_id: modbus_pzem
    # voltage:
      # name: "Grid Voltage PZEM"
      # id: pzem_grid_voltage
      # #internal: true
      # #filters:
      # #  - &mafilter quantile:
      # #      window_size: 5
      # #      send_every: 1
      # #      send_first_at: 1
      # #      quantile: .9
      # #  - offset: ${pzem_voltage_offset}
    # current:
      # name: "Grid Current PZEM"
      # id: pzem_grid_current
      # #filters:
      # #  - *mafilter
      # #  - offset: ${pzem_current_offset}
    # power:
      # name: "Grid Power PZEM"
      # id: pzem_grid_power
      # #filters:
      # #  - *mafilter
    # power_factor:
      # name: "Grid Power Factor PZEM"
      # id: pzem_grid_power_factor
      # #filters:
      # #  - *mafilter
    # energy:
      # name: "Grid Energy PZEM"
      # id: pzem_grid_energy
      # #filters:
      # #  - *mafilter

  # - platform: template
    # name: "Grid Power VA PZEM"
    # unit_of_measurement: "W"
    # device_class: power
    # state_class: measurement
    # accuracy_decimals: 0
    # update_interval: ${pzem_update_interval}
    # lambda: |-
      # return id(pzem_grid_current).state * id(pzem_grid_voltage).state;

  # - platform: template
    # name: "Grid Power VA*PF PZEM"
    # unit_of_measurement: "W"
    # device_class: power
    # state_class: measurement
    # accuracy_decimals: 0
    # update_interval: ${pzem_update_interval}
    # lambda: |-
      # return id(pzem_grid_current).state * id(pzem_grid_voltage).state * id(pzem_grid_power_factor).state;

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Grid Voltage"
    address: 4502
    register_type: holding
#    register_count: 14
#    force_new_range: true
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      //if (!id(grid_active).state) {
      //  return 0.0;
      //}
      return swapBytes(x);
    filters:
      - multiply: 0.1
      - offset: ${inverter_voltage_offset}
      - heartbeat: 10s

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Grid Frequency"
    address: 4503
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # id: PV_Voltage
    # name: "PV Voltage"
    # address: 4504
    # register_type: holding
    # value_type: U_WORD
    # unit_of_measurement: "V"
    # device_class: voltage
    # state_class: measurement
    # accuracy_decimals: 1
    # lambda: |-
      # return swapBytes(x);
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # id: PV_Power
    # name: "PV Power"
    # address: 4505
    # register_type: holding
    # value_type: U_WORD
    # unit_of_measurement: "W"
    # device_class: power
    # state_class: measurement
    # accuracy_decimals: 1
    # lambda: |-
     # return swapBytes(x);

  # - platform: template
    # id: PV_Current
    # name: "PV Current"
    # unit_of_measurement: "A"
    # device_class: current
    # state_class: measurement
    # accuracy_decimals: 1
    # update_interval: ${update_interval}
    # lambda: |-
      # if (id(PV_Voltage).state == 0) {
        # return 0;
      # }
      # return id(PV_Power).state / id(PV_Voltage).state;
   # # filters:
   # #   - heartbeat: 10s

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Voltage"
    id: battery_voltage
    address: 4506
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery SoC"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: battery
    address: 4507
    register_type: holding
    value_type: U_WORD
    state_class: measurement
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Charge Current"
    id: battery_charge_current
    address: 4508
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    internal: true
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Discharge Current"
    id: battery_discharge_current
    address: 4509
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    internal: true
    lambda: |-
      return swapBytes(x);

  - platform: template
    name: "Battery Current"
    id: battery_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
      return id(battery_charge_current).state - id(battery_discharge_current).state;
    filters:
      - heartbeat: 10s

  - platform: template
    name: "Battery Power"
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${update_interval}
    lambda: |-
      return id(battery_current).state * id(battery_voltage).state;

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Voltage"
    id: load_voltage
    address: 4510
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Frequency"
    address: 4511
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Power VA"
    id: load_Power_VA
    address: 4512
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "VA"
    device_class: apparent_power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Power"
    id: load_power
    address: 4513
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return swapBytes(x);


  - platform: template
    name: "Load Current"
    id: load_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 3
    update_interval: ${update_interval}
    lambda: |-
      if (id(load_voltage).state == 0) {
        return 0;
      }
      return id(load_Power_VA).state / id(load_voltage).state;


  - platform: template
    name: "Load Power Factor"
    id: load_power_factor
    device_class: power_factor
    state_class: measurement
    accuracy_decimals: 2
    update_interval: ${update_interval}
    lambda: |-
      if (id(load_power).state == 0) {
        return 0;
      }
      return id(load_power).state / id(load_Power_VA).state;

 

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Percent"
    address: 4514
#    register_count: 21
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    lambda: |-
      return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Load Percent2"
    # address: 4515
    # register_type: holding
    # value_type: U_WORD
    # unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4516"
    # address: 4516
    # skip_updates: ${read_skip_updates}
 # #   register_count: 19
 # #   force_new_range: true
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4517"
    # address: 4517
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4518"
    # address: 4518
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4519"
    # address: 4519
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);
  
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4520"
    # address: 4520
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4521"
    # address: 4521
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4522"
    # address: 4522
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4523"
    # address: 4523
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4524"
    # address: 4524
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4525"
    # address: 4525
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4526"
    # address: 4526
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4527"
    # address: 4527
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4528"
    # address: 4528
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4529"
    # address: 4529
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4530"
    # address: 4530
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4531"
    # address: 4531
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4532"
    # address: 4532
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4533"
    # address: 4533
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);
  
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4534"
    # address: 4534
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);
  # 4535 -> binary

  # 4536 -> text

  # 4537 -> text

  # 4538 -> text

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Charger Source Priority"
    id: charger_source_priority_raw
    address: 4536
    register_type: holding
    value_type: U_WORD
  #  unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    internal: True
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Output Source Priority"
    id: output_source_priority_raw
    address: 4537
    register_type: holding
    value_type: U_WORD
  #  unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    internal: True
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "AC Input Mode"
    id: ac_input_voltage_raw
    address: 4538
    register_type: holding
    value_type: U_WORD
  #  unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    internal: True
    lambda: |-
      return swapBytes(x);

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Unknown4539"
    # address: 4539
    # skip_updates: ${read_skip_updates}
# #    force_new_range: true
# #    register_count: 14
    # register_type: holding
    # value_type: U_WORD
  # #  unit_of_measurement: "%"
    # device_class: power_factor
    # state_class: measurement
    # lambda: |-
      # return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Target Output Frequency"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4540
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    lambda: |-
      uint16_t value = swapBytes(x);
      switch (value) {
        case 0: return std::uint16_t(50);
        case 1: return std::uint16_t(60);
        default: return x;
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Max Total Charging Current"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4541
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Target Output Voltage"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4542
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Max Utility Charging Current"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4543
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Back To Utility Source Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4544
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Back To Battery Source Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4545
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Charging Voltage Bulk"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4546
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);
#    on_value:
#      then:
#        - number.set:
#            id: charging_voltage_bulk
#            value: !lambda "return x;"

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Charging Voltage Float"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4547
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);
#    on_value:
#      then:
#        - number.set:
#            id: charging_voltage_float
#            value: !lambda "return x;"

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Low CutOff Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4548
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Equalization Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4549
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Equalized Time"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4550
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x); 

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Equalized Timeout"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4551
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Equalization Interval"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4552
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);

  # 4553 -> binary

  # 4554 -> binary

  # 4555 -> text
  
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Value 4554"
    id: grid_active_value
    address: 4554
    register_type: holding
    value_type: U_WORD  # 16-бітове беззнакове ціле число
    internal: true
    lambda: |-
      uint16_t value = x;
       // ESP_LOGI("modbus_flags", "Full Register Value at Address 4554: 0x%04X", value);
      if (value == 0x0200) {
        id(on_grid).publish_state(true);
        id(on_battery).publish_state(false);
      } 
      // Устанавливаем состояние "On Battery"
      else if (value == 0x0700) {
        id(on_grid).publish_state(false);
        id(on_battery).publish_state(true);
      } 
      // Обработка других состояний
      else {
        id(on_grid).publish_state(false);
        id(on_battery).publish_state(false);
      }
      return value;
    unit_of_measurement: ""
    device_class: "power_factor"
    state_class: "measurement"

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Charger Status"
    id: charger_status_raw
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4555
    register_type: holding
    value_type: U_WORD
    internal: True
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Temperature"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4557
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
      
binary_sensor:

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Record Fault Code"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Equalization"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x2

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Equalization Activated Immediately"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x4

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x100

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Backlight"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x400

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Restart On Overload"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x800

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Restart On Overheat"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x1000

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Beep On Primary Source Fail"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x2000

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Return To Default Screen"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x4000

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Overload Bypass"
    # entity_category: diagnostic
    # address: 4535
    # register_type: holding
    # bitmask: 0x8000

  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Load Enabled"
    # address: 4553
    # register_type: holding
    # bitmask: 0x4000

  - platform: template
    name: "On Grid"
    id: on_grid

  - platform: template
    name: "On Battery"
    id: on_battery
  
  ####################################
  # Read config registers one by one #
  ####################################

text_sensor:
  - platform: template
    name: "AC Input Mode"
    lambda: |-
      if (id(ac_input_voltage_raw).state == 1) {
        return std::string("UPS: 170-280 V");
      } else if (id(ac_input_voltage_raw).state == 0) {
        return std::string("APL: 90-280 V");
      } else {
        return std::string("Unknown");
      }
    update_interval: 10s

  - platform: template
    name: "Charger Source Priority"
    lambda: |-
      if (id(charger_source_priority_raw).state == 0) {
        return std::string("Utility First");
      } else if (id(charger_source_priority_raw).state == 1) {
        return std::string("Solar First");
      } else if (id(charger_source_priority_raw).state == 2) {
        return std::string("Solar and Utility");
      } else if (id(charger_source_priority_raw).state == 3) {
        return std::string("Only Solar");
      } else {
        return std::string("Unknown");
      }
    update_interval: 10s

  - platform: template
    name: "Charger Status"
    lambda: |-
      if (id(charger_status_raw).state == 10) {
        return std::string("Discharge");
      } else if (id(charger_status_raw).state == 11) {
        return std::string("Bulk");
      } else if (id(charger_status_raw).state == 12) {
        return std::string("Absorption");
      } else if (id(charger_status_raw).state == 13) {
        return std::string("Float");
      } else {
        return std::string("Unknown");
      }
    update_interval: 10s

  - platform: template
    name: "Output Source Priority"
    lambda: |-
      if (id(output_source_priority_raw).state == 0) {
        return std::string("Utility first (USB)");
      } else if (id(output_source_priority_raw).state == 1) {
        return std::string("Solar first (SUB)");
      } else if (id(output_source_priority_raw).state == 2) {
        return std::string("SBU priority");
      } else {
        return std::string("Unknown");
      }
    update_interval: 10s

select:
#Menu6 -5002
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 18: Buzzer Alarm"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5002
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 1

#Menu6 -5005
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Menu 06: Auto restart when overload"
    # optimistic: true
    # force_new_range: true
    # register_count: 1
    # skip_updates: ${select_skip_updates}
    # entity_category: config
    # address: 5005
    # value_type: U_WORD
    # optionsmap:
      # "OFF": 0
      # "ON": 1

#Menu7 -5006
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Menu 07: Auto restart when overheat"
    # optimistic: true
    # force_new_range: true
    # register_count: 1
    # skip_updates: ${select_skip_updates}
    # entity_category: config
    # address: 5006
    # value_type: U_WORD
    # optionsmap:
      # "OFF": 0
      # "ON": 1

#menu22-5007
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 22: Beep On Primary Source Fail"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5007
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 1

 #menu23 - 5009
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Menu 23: Overload Bypass"
    # optimistic: true
    # force_new_range: true
    # register_count: 1
    # skip_updates: ${select_skip_updates}
    # entity_category: config
    # address: 5009
    # value_type: U_WORD
    # optionsmap:
      # "OFF": 0
      # "ON": 1

#menu16 -5017
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    id: charger_source_priority_select
    name: "Menu 16: Charger Source Priority"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5017
    value_type: U_WORD
    optionsmap:
      "Utility first": 0
      "Solar first": 1
      "Solar and Utility": 2
      "Only Solar": 3
      
#Menu1 -5018
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    id: output_source_priority_select
    name: "Menu 01: Output Source Priority"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5018
    value_type: U_WORD
    optionsmap:
      "Utility first (USB)": 0
      "Solar first (SUB)": 1
      "SBU priority": 2


#Menu3-5019
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 03: AC Input Voltage"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5019
    value_type: U_WORD
    optionsmap:
      "APL: 90-280 V": 0
      "UPS: 170-280 V": 1
#Menu4 -?    
#Menu5 -5020
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Menu 05: Battery Type"
    # optimistic: true
    # force_new_range: true
    # register_count: 1
    # skip_updates: ${select_skip_updates}
    # entity_category: config
    # address: 5020
    # value_type: U_WORD
    # optionsmap:
      # "AGM": 0
      # "Flooded": 1
      # "User Defined": 2     
      # "Litium": 3 



#Menu8 -?
#Menu9 -5021 Output frequency  0 - 50hz, 1 - 60hz

#Menu2-5022
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 02: Max Total Charge Current"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5022
    value_type: U_WORD
    optionsmap:
      "10": 10
      "20": 20
      "30": 30
      "40": 40
      "50": 50
      "60": 60
      "70": 70
      "80": 80

#Menu10 -5023 Output voltage (one of 220, 230, 240)

#Menu11 - 5024
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 11: Max Utility Charge Current"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5024
    value_type: U_WORD
    optionsmap:
      "2": 2
      "10": 10
      "20": 20
      "30": 30
      "40": 40
      "50": 50
      "60": 60
      "70": 70

#Menu12 - 5025
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 12: Back To Utility Source Voltage"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5025
    value_type: U_WORD
    optionsmap:
      "48": 480
      "49": 490
      "50": 500
      "51": 510
      "52": 520
      
#Menu13 - 5026
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 13: Back To Battery Source Voltage"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5026
    value_type: U_WORD
    optionsmap:
      "FULL": 0
      "49": 490
      "50": 500
      "51": 510
      "52": 520
      "53": 530
      "54": 540
      "55": 550
      "56": 560
      "57": 570
      
  #Menu26 - 5027  Bulk charging voltage
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 26: Charging Voltage Bulk"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5027
    value_type: U_WORD
    optionsmap:
      "3.36 x cell 53.8 V": 538
      "3.40 x cell 54.4 V": 544
      "3.42 x cell 54.7 V": 547
      "3.45 x cell 55.2 V": 552
      "3.48 x cell 55.6 V": 556
      "3.50 x cell 56.0 V": 560
      "3.52 x cell 56.4 V": 564
      "3.55 x cell 56.8 V": 568
      "3.57 x cell 57.2 V": 572
      "3.58 x cell 57.3 V": 573
      "3.59 x cell 57.4 V": 574
  
  #Menu27 - 5028 Floating charging voltage
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 27: Charging Voltage Float"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5028
    value_type: U_WORD
    optionsmap:
      "3.36 x cell 53.8 V": 538
      "3.40 x cell 54.4 V": 544
      "3.42 x cell 54.7 V": 547
      "3.45 x cell 55.2 V": 552
      "3.48 x cell 55.6 V": 556
      "3.50 x cell 56.0 V": 560
      "3.52 x cell 56.4 V": 564
      "3.55 x cell 56.8 V": 568
      "3.57 x cell 57.2 V": 572
      "3.58 x cell 57.3 V": 573
      "3.59 x cell 57.6 V": 574
   
    #Menu28 - 5029 Low DC cut-off voltage
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Menu 28: Low DC cut-off voltage"
    optimistic: true
    force_new_range: true
    register_count: 1
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5029
    value_type: U_WORD
    optionsmap:
      "2.75 x cell 44.0 V": 440
      "2.8 x cell 44.8 V": 448
      "2.85 x cell 45.6 V": 456
      "2.9 x cell 46.4 V": 464
      "2.95 x cell 47.2 V": 472
      "3.0 x cell 48.0 V": 480
      "3.05 x cell 48.8 V": 488
      "3.1 x cell 49.6 V": 496

  #Menu29 - 5030 Battery equalization voltage
  #Menu33 - 5031 Battery equalized time 
  #Menu34 - 5032 Battery equalized timeout
  #Menu35 - 5033 Equalization interval

# number:
  # # Menu26 - 5027 Bulk charging voltage
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Menu 26: Charging Voltage Bulk"
    # id: charging_voltage_bulk
    # force_new_range: true
    # register_type: holding  # Укажите правильный тип регистра
    # address: 5027
    # value_type: U_WORD
    # min_value: 53.8  # Минимальное значение
    # max_value: 58.2  # Максимальное значение
    # step: 0.1        # Шаг изменения значения
    # entity_category: config
    # unit_of_measurement: "V"
    # write_lambda: |-
      # return x * 10;

  # # Menu27 - 5028 Floating charging voltage
  # - platform: modbus_controller
    # modbus_controller_id: smg_inverter
    # name: "Menu 27: Charging Voltage Float"
    # id: charging_voltage_float
    # force_new_range: true
    # register_type: holding  # Укажите правильный тип регистра
    # address: 5028
    # value_type: U_WORD
    # min_value: 53.8  # Минимальное значение
    # max_value: 57.6  # Максимальное значение
    # step: 0.1        # Шаг изменения значения
    # entity_category: config
    # unit_of_measurement: "V"
    # write_lambda: |-
      # return x * 10;
